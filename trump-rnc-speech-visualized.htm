<!--

#trump-rnc-speech
https://github.com/braunsg/trump-rnc-speech

Created by: Steven Braun
Last updated: 2016-07-26

DESCRIPTION

A D3-based visualization of Donald Trump's RNC acceptance speech on July 21, 2016.

LICENSE

The repository is openly distributed via an MIT permissive license.

-->

<!DOCTYPE html>
<head>
	<title>Do You Hear That? It's Trump's America</title>
	<meta http-equiv="cache-control" content="max-age=0" />
	<meta http-equiv="cache-control" content="no-cache" />
	<meta http-equiv="expires" content="0" />
	<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
	<meta http-equiv="pragma" content="no-cache" />	
	<meta charset="UTF-8">
	<script src="lib/d3.v4.js"></script>
	<script src="lib/jquery-3.0.0.min.js"></script>
	<style>
	
		@import 'https://fonts.googleapis.com/css?family=Crimson+Text:400,400i|Source+Sans+Pro:300,600';

		html, body {
			width: 100%;
			height: 100vh;
			margin: 0px;
			padding: 0px;
			
		}
			
		#wrapper {
			width: 100%;
			height: 100%;
			display: flex:
			flex-direction: column;
			margin: 0px;
			padding: 0px;
		}	
		
		#header {
			width: 100%;
			margin: 0px 0px 0px 0px;
			padding: 25px;
			border-bottom: 4px solid #CECECE;
			cursor: default;
			box-sizing: border-box;
				-webkit-box-sizing: border-box;
				-moz-box-sizing: border-box;
		}
		
		
		#vis_container {
			width: 100%;
			height: 125px;
			margin: 0px;
			padding: 0px;
			overflow-x: scroll;
		}
		
		svg {
			cursor: crosshair;
		}

		#subvis_container {
			width: 100%;
			height: 200px;
			margin: 0px;
			padding: 0px;
			overflow-x: scroll;
		}
		
		#search_container {
			display: flex;
			flex-direction: row;
			justify-content: space-between;
			width: 100%;
			margin: 0px;
			padding: 5px;
			background-color: #333333;
			box-sizing: border-box;
				-moz-box-sizing: border-box;
				-webkit-box-sizing: border-box;
		}
		
		.search_category {
			font-family: "Source Sans Pro", sans-serif;
			font-size: 1.3em;	
			text-align: center;	
			color: #FFFFFF;
			flex: 1 0;
			margin: 0px;
			padding: 5px;
			cursor: pointer;
		}
		
		.search_category_selected {
			color: #ffab15;
		}
		
		#text_container {
			width: 100%;
			margin: 0px;
			padding: 0px;
			cursor: default;
		}
		
		
		#content_container {
			position: absolute;
			z-index: 100;
			display: flex;
			width: 38%;
			flex-direction: column;
			align-items: flex-start;
			background: rgba(249,249,249,0.8);
			margin: 0px;
			padding: 0px;
		}
		
		.text_content {
			font-family: "Source Sans Pro", sans-serif;
			font-size: 1.1em;
			line-height:1.5em;
			font-weight: 300;
			padding: 10px 25px 10px 25px;
			margin: 0px;
			box-sizing: border-box;
				-moz-box-sizing: border-box;
				-webkit-box-sizing: border-box;
		}
		
		.section_header {
			font-family: "Crimson Text", serif;
			width: 100%;
			padding: 5px 25px 5px 25px;
			margin: 0px;
			text-transform: lowercase;
			font-variant: small-caps;
			font-size: 2.0em;
			letter-spacing: 2px;
			box-sizing: border-box;
				-moz-box-sizing: border-box;
				-webkit-box-sizing: border-box;
		}

		#title {
			font-family: "Crimson Text", serif;
			font-size: 2.2em;	
			line-height: 1.2em;
			margin: 0px;
			padding: 0px;
			color: #333333;
		}


		
		.label_text {
			font-family: "Source Sans Pro", Arial, sans-serif;
			font-size: 0.8em;
			font-weight: 600;
			text-anchor: middle;
			fill: #333333;
			cursor: default;
		}

		.temporary_text {
			font-family: "Source Sans Pro", Arial, sans-serif;
			font-size: 0.7em;
			fill: #333333;
			font-weight: 300;
			cursor: default;
		}
				
		.overlay {
			fill: none;
			pointer-events: all;
		}
		
		.cheer_general {
			fill: #f9c930;
		}
		
		.cheer_special {
			fill: #3766cc;
		}

		.cheer_group.selected {
			opacity: 0.5;
		}

		.cheer_group.deselected {
			opacity: 0.05;
		}
		
		.word.selected {
			opacity: 1;
		}

		.word.deselected {
			opacity: 0.05;
		}
		
		a:link, a:visited {
			color: #a01818;
			text-decoration: underline;
		}
		
		.loading {
			font-family: "Crimson Text", serif;
			width: 100%;
			height: 100%;
			padding: 5px 25px 5px 25px;
			text-align:center;
			vertical-align: center;
			margin: 0px;
			text-transform: lowercase;
			font-variant: small-caps;
			font-size: 2.0em;
			letter-spacing: 2px;
			box-sizing: border-box;
				-moz-box-sizing: border-box;
				-webkit-box-sizing: border-box;
		
		}
	</style>
	
	<script>

	$(document).ready(function() {


		//////////////////////////////////////////////////////////////////////////////////
		//// DEFINE FUNCTION PROTOTYPES
	
		// Move element to front and back -- see http://bl.ocks.org/eesur/4e0a69d57d3bfc8a82c2	
		// https://github.com/wbkd/d3-extended
		d3.selection.prototype.moveToFront = function() {  
		  return this.each(function(){
			this.parentNode.appendChild(this);
		  });
		};	

		d3.selection.prototype.moveToBack = function() {  
			return this.each(function() { 
				firstChild = this.parentNode.firstChild; 
				if (firstChild) { 
					this.parentNode.insertBefore(this, firstChild); 
				} 
			});
		};	


		// Loading three data sets at once; wait to complete page structure until all data is loaded
		$.when($.getJSON("data/cheer_data.json"),$.getJSON("data/aggregated_data_cleaned.json"),$.getJSON("data/aggregated_signals_2s.json")).done(function(cheers_response,data_detail_response,data_aggregate_response) {

			// Clear contents of containers ("loading...")
			$(".loading").remove();
			
			// Capture loaded data
			data_aggregate = data_aggregate_response[0];
			data_detail = data_detail_response[0];
			cheers = cheers_response[0];
					
			// Define common color set
			colors = {"positive": "#008837", //#4dac26
					  "negative": "#ca0020",
					  "neutral": "#525252"};
					  
			
			// Define two namespaces -- one for main visualization (data in aggregate), the other for
			// the secondary visualization (data detail)
			
			main = {};
			sub = {};
			
			
			//////////////////////////////////////////////////////////////////////////////////
			//// CREATE MAIN VISUALIZATION
			

			// Specify start and end time to clip beginning of speech data
			start_time = 120;
			end_time = 4601;
			
			// Define SVG dimensions
			main.width = $("#vis_container").innerWidth();
			main.height = $("#vis_container").innerHeight() - 15;
			main.margin = {top: 0, left: 15, right: 15, bottom: 10};


			// A scale factor that multiplies width of document to stretch out SVG
			main.scale_factor = 4;
			main.barWidth = 2;
			main.max_barHeight = main.height - main.margin.bottom - main.margin.top;

			// Generate SVG canvas
			main.svg = d3.select("#vis_container").append("svg")
				.attr("id","svg")
				.attr("width",main.width*main.scale_factor)
				.attr("height",main.height)
				.style("background","#F9F9F9")
				.append("g")
					.attr("width",main.width*main.scale_factor)
					.attr("height",main.height);
			
			
			// Define linear scale for page width,
			// corresponding to elapsed time in speech
			main.xScale = d3.scaleLinear()
				.domain([start_time,end_time])
				.range([main.margin.left, main.width * main.scale_factor - main.margin.right]);
																
			main.intensityScale = d3.scalePow()
				.exponent(2)
				.domain([0,200])
				.range([2,100]);
					
			main.relativeScale = d3.scalePow()
				.exponent(2)
				.domain([0,1])
				.range([0,main.max_barHeight]);

			// Quantize scale, used to determine number of flanking elements for individual words
			main.flankScale = d3.scaleQuantize()
				.domain([0,4])
				.range([0,1,2,3]);				
												
			// Create a bisector to enable X-mouseover;
			// see https://bl.ocks.org/mbostock/3902569
			main.bisectTime = d3.bisector(function(d) { return d.t; }).left,

			// Append rectangles for sections of cheering			
			// Create rectangular background area for cheer sections
			main.svg.append("rect")
				.attr("x",0)
				.attr("y",main.height - main.margin.bottom)
				.attr("width",main.width*main.scale_factor)
				.attr("height",main.margin.bottom)
				.attr("fill","#000000")
				.attr("stroke","none");
			
			cheers.forEach(function(c) {
				main.cheers = main.svg.selectAll(".cheer")
					.data(cheers)
					.enter()
					.append("rect")
						.attr("x", function(d) { return main.xScale(Number(d.cheer_start)); })
						.attr("y", main.height - main.margin.bottom)
						.attr("width", function(d) { return main.xScale(Number(d.cheer_end)) - main.xScale(Number(d.cheer_start)); })
						.attr("height", main.margin.bottom)
						.attr("stroke","#FFFFFF")
						.attr("stroke-width",1)
						.attr("class", function(d) {
							if(d.cheer_type === "boo") {
								return "cheer_special"; // Purple
							} else {
								return "cheer_general"; // Dark blue
							}
						})
						.attr("opacity",1);	
			});

			
			// Draw lines for border of cheer sections		
			main.svg.append("line")
				.attr("x1",0)
				.attr("y1",main.height-main.margin.bottom)
				.attr("x2",main.width*main.scale_factor)
				.attr("y2",main.height-main.margin.bottom)
				.attr("stroke","#333333")
				.attr("stroke-width",2);

			main.svg.append("line")
				.attr("x1",0)
				.attr("y1",main.height)
				.attr("x2",main.width*main.scale_factor)
				.attr("y2",main.height)
				.attr("stroke","#333333")
				.attr("stroke-width",2);
								
			// Draw data points for each 2-second window of time					
			data_aggregate["data"].forEach(function(w,wi) {
				
				this_heights = {"cp": main.intensityScale(Math.abs(w.p)),
								"cn": main.intensityScale(Math.abs(w.n)),
								"cb": main.intensityScale(Math.abs(w.b))};
				
				total = Math.abs(w.p) + Math.abs(w.n) + Math.abs(w.b);

				if(total > 0) {
				
					this_data = {"cp": main.relativeScale(Math.abs(w.p)/total),
								 "cn": main.relativeScale(Math.abs(w.n)/total),
								 "cb": main.relativeScale(Math.abs(w.b)/total)};

				} else {
				
					this_data = {"cp": main.relativeScale(0),
								 "cn": main.relativeScale(0),
								 "cb": main.relativeScale(0)};
				}							
					
				
				// Create group for word
				spectral_group = main.svg.append("g")
					.datum(w)
					.attr("opacity",0.7)
					.attr("class","spectral_group")
					.classed("time_group_" + w.t,true)
					.attr("transform", "translate(" + main.xScale(w.t) + "," + (main.height - main.margin.bottom) + ")");


				// Draw a neutral rectangle in each group
				spectral_group.append("rect")
					.attr("x",0)
					.attr("y",0)
					.attr("height", this_data.cb)
					.attr("transform", function() {
						return "translate(0," + (-1 * this_data.cb - this_data.cn) + ")";
					})
					.attr("width",main.barWidth)
					.attr("stroke",main.baseColor)
					.attr("stroke-width",0)
					
					.attr("opacity",function(d) {
						return 1;
					})
					.attr("fill",colors.neutral);

				// Draw a positive rectangle in each group
				spectral_group.append("rect")
					.attr("class","positive")
					.attr("x",0)
					.attr("y",0)
					.attr("height", this_data.cp)
					.attr("transform", function() {
						return "translate(0," + (-1 * this_data.cn - this_data.cb - this_data.cp) + ")";
					})
					.attr("width",main.barWidth)
					.attr("stroke",main.baseColor)
					.attr("stroke-width",0)
					
					.attr("opacity",function(d) {
						return 1;
					})
					.attr("fill",colors.positive);



				// Draw a negative rectangle in each group
				spectral_group.append("rect")
					.attr("class","negative")
					.attr("x",0)
					.attr("y",0)
					.attr("height", this_data.cn)
					.attr("transform", "translate(0," + -1*this_data.cn + ")")
					.attr("width",main.barWidth)
					.attr("stroke",main.baseColor)
					.attr("stroke-width",0)
					
					.attr("opacity",function(d) {
						return 1;
					})
					.attr("fill",colors.negative);

			}); // end data.forEach()
			
				
			/////////////////////////////////////////////////////////////////////////////
			//// CREATE SECONDARY VISUALIZATION
									
			// Minimum and maximum intensities,
			// determined from file
			sub.max_intensity = 92;
			sub.min_intensity = 45; // 45
			
			// A base color, to be used as background for SVG and div
			sub.baseColor = "#F3F3F3";
			$("#subvis_container").css("background",sub.baseColor);
			
			// Define global variables
			sub.width = $("#subvis_container").innerWidth();
			sub.height = $("#subvis_container").innerHeight()-15;
			sub.margin = {top: 25, left: 25, right: 25, bottom: 25};

			// A scale factor that multiplies width of document to stretch out SVG
			sub.scale_factor = 10;	
			sub.displacement = 2;				

			sub.svg = d3.select("#subvis_container")
				.append("svg")
				.attr("id","sub_svg")
				.attr("width",sub.width * sub.scale_factor)
				.attr("height",sub.height)
				.attr("transform","translate(0,0)")
				.append("g")
					.attr("width",sub.width*sub.scale_factor)
					.attr("height",sub.height);

			// Backfill
			sub.backfill = sub.svg.append("rect")
				.attr("x",0)
				.attr("y",0)
				.attr("width", sub.width * sub.scale_factor)
				.attr("height",sub.height - sub.margin.bottom)
				.attr("fill",sub.baseColor);
		
			// Line marker for mouseover
			sub.lineMarker = sub.svg.append("line")
				.attr("x1",0)
				.attr("x2",0)
				.attr("y1",sub.margin.top + 10)
				.attr("y2",sub.height-sub.margin.bottom)
				.attr("stroke","gold")
				.attr("stroke-width",2)
				.attr("opacity",0)
				.attr("transform","translate(0,0)");
				
			// Define linear scale for page width,
			// corresponding to elapsed time in speech
			sub.xScale = main.xScale.copy()
				.range([sub.margin.left, sub.width * sub.scale_factor - sub.margin.right]);
										
			// Define a scale that does the same as above, but this time applying adjustment
			// for circle radii
			sub.dr_timeScale = d3.scalePow()
				.exponent(4)
				.domain([0,5])
				.range([0,10])
				.clamp(true);
			
			// Define a scale that determines circle radii, based on relative intensity
			// of word utterance
			sub.intensityScale = d3.scalePow()
				.exponent(4)
				.domain([0,sub.max_intensity/sub.min_intensity])
				.range([0,75]);

			sub.rScale = sub.intensityScale.copy()
				.exponent(2)
				.range([1,10]);

			// Quantize scale
			sub.flankScale = d3.scaleQuantize()
				.domain([0,5])
				.range([0,1,2,3,4,5,6,7,8,9,10]);

			sub.cheerScale = sub.flankScale.copy()
				.domain([0,40])
				.range([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]);
						
			// Create a bisector to enable X-mouseover;
			// see https://bl.ocks.org/mbostock/3902569
			sub.bisectTime = d3.bisector(function(d) { return d.time_start; }).left,

			// Append markers for sections of cheering
			cheers.forEach(function(c) {
				var median = (Number(c.cheer_start) + Number(c.cheer_end))/2;
				base_r = 25;
				var cheer_group = sub.svg.append("g")
					.datum(c)
					.attr("class","cheer_group")
					.classed("selected",true)
					.attr("transform","translate(" + sub.xScale(median) + "," + sub.height/2 + ")");
					 
				// Draw a central circle in each group
				cheer_group.append("circle")
					.attr("cx",0)
					.attr("cy",0)
					.attr("r", base_r)
					.attr("class", function(d) {
						if(d.cheer_type === "boo") {
							return "cheer_special"; // Purple
						} else {
							return "cheer_general"; // Yellow
						}
					});
					
 				// Now add flanking circles
				t_elapse = Number(c.cheer_end) - Number(c.cheer_start);
				count = sub.cheerScale(t_elapse);

				if(count > 0) {
					dx = 6;
					for(t_i = 1; t_i <= count; t_i++) {
						t_dr = t_i*(base_r/count);
						// Accounting for some isolated float rounding errors that return negative radii
						if(base_r - t_dr >= 0) {
							cheer_group.append("circle")
								.attr("cx",0)
								.attr("cy",0)
								.attr("r", base_r-t_dr)
								.attr("transform", function() {
									return "translate(" + (dx + sub.displacement)*(t_i) + ",0)";
								}).attr("class", function(d) {
									if(d.cheer_type === "boo") {
										return "cheer_special"; // Purple
									} else {
										return "cheer_general"; // Yellow
									}
								})
								.attr("opacity",1 - (1/count)*t_i);	
						}					
					} // end for(t)
					
				} // end if(count > 0)	

			});

			// Generate time axis
			sub.axis = d3.axisBottom(sub.xScale)
				.ticks(150)
				.tickFormat(function(d) { 
					if(d % 60 == 0) {
						return (d / 60 - 2) + " min";
					}
				}).tickSizeInner(5);
				
			
			sub.axis_group = sub.svg.append("g")
				.attr("class","sub_timeScale")
				.attr("transform","translate(0," + (sub.height - sub.margin.bottom) + ")")
				.attr("stroke","black")
				.attr("fill","black")
				.call(sub.axis);
			
			// Create text label to display when hover over circles
			sub.label_text = sub.svg.append("text")
				.attr("class","label_text")
				.attr("x", 0)
				.attr("y",sub.margin.top)
				.attr("opacity",0)
				.text("None");

			
			// Now for each object (word) in data array,
			// create a new group and circle representing it 
			data_detail.forEach(function(w,wi) {
			
				base_height = sub.intensityScale(w.intensity/sub.min_intensity);

				base_r = sub.rScale(w.intensity/sub.min_intensity) + sub.dr_timeScale(w.time_end - w.time_start);
				

				// Create group for word
				word = sub.svg.append("g")
					.datum(w)
					.attr("class","word")
					.classed("token_" + w.token_id,true)
					.classed("selected",true)
					.attr("transform", function(d) {
						// Base displacement determined by polarity						
						if(d.polarity === "positive") {
							dy = -30;
						} else if(d.polarity === "negative") {
							dy = 30;
						} else if(d.polarity === "neutral") {
							dy = 0;
						}
						
						return "translate(" + sub.xScale(0.5*Math.ceil(d.time_start/0.5)) + "," + (sub.height/2 + dy) + ")";
					});
					
				// Draw a central circle in each group
				word.append("circle")
					.attr("class","central_circle")
					.attr("cx",0)
					.attr("cy",0)
					.attr("r", base_r)
					.attr("stroke","gold")
					.attr("stroke-width",0)
					.attr("fill",function(d) { return colors[d.polarity]; })
					.on("mouseover", function(d) {
						sub.label_text.attr("x", sub.xScale(d.time_start));
						sub.label_text.text(d.token_label);
						sub.lineMarker.transition()
							.duration(100)
							.attr("transform","translate(" + sub.xScale(d.time_start) + ",0)")
							.attr("opacity",1);

						sub.svg.selectAll(".central_circle")
							.attr("stroke-width",0);
						
						d3.select(this)
							.attr("stroke-width",3);
						
						d3.select(this).moveToFront();
					
					}).on("mouseout", function(d) {
													
						sub.svg.selectAll(".central_circle")
							.attr("stroke-width",0);
					});	
					
					
 				// Now add flanking circles
				t_elapse = w.time_end - w.time_start;
				count = sub.flankScale(t_elapse);

				if(count > 0) {
					dx = 4;
					for(t_i = 1; t_i <= count; t_i++) {
						t_dr = t_i*(base_r/count);
						// Accounting for some isolated float rounding errors that return negative radii
						if(base_r-t_dr >= 0) {
							word.append("circle")
								.attr("cx",0)
								.attr("cy",0)
								.attr("r", base_r-t_dr)
								.attr("opacity",1 - (1/count)*t_i) // diminish opacity as trail off
								.attr("transform", function() {
									return "translate(" + (dx + sub.displacement)*(t_i) + ",0)";
								})
								.attr("fill",function(d) { return colors[d.polarity]; })
								.moveToBack();
						}
					} // end for(t)
				} // end if(count > 0)					
		}); // end data_detail.forEach()
		
		
		// Create rect overlay to enable X-mouseover interactivity for sub.svg
		sub.svg.append("rect")
			.attr("class", "overlay")
			.attr("width", sub.width*sub.scale_factor)
			.attr("height", sub.height)
			.on("mouseover", function() { sub.label_text.attr("opacity",1); })
			.on("mouseout", function() { 
				sub.svg.selectAll(".central_circle")
					.attr("stroke-width",0);
					
			})
			.on("mousemove", function() {
				x0 = sub.xScale.invert(d3.mouse(this)[0]),
					i = sub.bisectTime(data_detail, x0, 1),
					d0 = data_detail[i - 1],
					d1 = data_detail[i],
					d = x0 - d0.time_start > d1.time_start - x0 ? d1 : d0;
					sub.label_text.attr("x", sub.xScale(d.time_start));
					sub.label_text.text(d.token_label);
					sub.lineMarker.transition()
						.duration(100)
						.attr("transform","translate(" + sub.xScale(d.time_start) + ",0)")
						.attr("opacity",1);

					sub.svg.selectAll(".central_circle")
						.attr("stroke-width",0);
						
					sub.svg.select(".token_" + d.token_id + " .central_circle")
						.attr("stroke-width",3);
						
					sub.svg.select(".token_" + d.token_id).moveToFront();
						
			
			}).on("click", function() {
				if(categories.filtered == true) {
					sub.svg.selectAll(".temporary_text").remove();
					$(".search_category").removeClass("search_category_selected");
					sub.svg.selectAll(".word")
						.classed("selected",true)
						.classed("deselected",false);
						
					sub.svg.selectAll(".cheer_group")
						.classed("selected",true)
						.classed("deselected",false);
						
					categories.filtered = false;
				}			
			
			});
		
			// With both main and secondary SVGs created,
			// bind mouseover translation effect between them
		
			d3.select("#vis_container").on("mousemove",function() {

				// First, translate main.svg and sub.svg by scrolling container divs
				mouse_x = d3.mouse(d3.select("#vis_container").node())[0];
				if(typeof main.current_p === 'undefined') {
					main.current_p = mouse_x;
				}
				var current_dx = mouse_x - main.current_p;
				if(current_dx > 0) {
					var dir = -1;
				} else {
					var dir = 1;
				}
			
				main.translationScale = d3.scaleLinear()
					.domain([main.margin.left,main.width-main.margin.right])
					.range([0,main.width*(main.scale_factor-1)+20])
					.clamp(true);

				sub.translationScale = d3.scaleLinear()
					.domain([0,main.width*(main.scale_factor-1)])
					.range([-sub.margin.left,sub.width*(sub.scale_factor-1)+20])
					.clamp(true);
				
				var main_relative_translation = main.translationScale(mouse_x);
				$("#vis_container").scrollLeft(main_relative_translation);
							
				var sub_relative_translation = sub.translationScale(main_relative_translation);
				$("#subvis_container").scrollLeft(sub_relative_translation);

				// Next, mark closest bar in main.svg
				var x = main.xScale.invert(d3.mouse(main.svg.node())[0]);	

				i = main.bisectTime(data_aggregate["data"], x, 1),
					d0 = data_aggregate["data"][i - 1],
					d1 = data_aggregate["data"][i],
					d = x - d0.t > d1.t - x ? d1 : d0;

				main.marker.attr("opacity",1)
					.attr("transform","translate(" + main.xScale(d.t) + ",0)");
						
			}).on("mouseout", function() {
				main.marker.attr("opacity",0);		
			});

			// Now create a rectangular marker to go with hover mouseover/translation effect
			// Use arbitrary times to determine rectangle width, relative to time windows
			// of both SVGs
			var t_a = 500;
			var t_b = sub.xScale.invert(sub.width + sub.xScale(t_a));
			var marker_width = main.xScale(t_b) - main.xScale(t_a);
			main.marker = main.svg.append("g")
				.attr("width",main.width*main.scale_factor)
				.attr("height",main.height)
				.attr("transform", "translate(0,0)")
				.attr("opacity",0);
				
			main.marker.append("rect")
				.attr("x",0)
				.attr("y",0)
				.attr("width",main.width*main.scale_factor)
				.attr("height",main.height)
				.attr("stroke","none")
				.attr("fill","#FFFFFF")
				.attr("opacity",0.8)
				.attr("transform","translate(" + (-main.width*main.scale_factor - marker_width/2) + ",0)");

			main.marker.append("rect")
				.attr("x",0)
				.attr("y",0)
				.attr("width",marker_width)
				.attr("height",main.height)
				.attr("stroke","none")
				.attr("fill","none")
				.attr("opacity",1)
				.attr("transform","translate(" + -marker_width/2 + ",0)");

			main.marker.append("rect")
				.attr("x",0)
				.attr("y",0)
				.attr("width",main.width*main.scale_factor)
				.attr("height",main.height)
				.attr("stroke","none")
				.attr("fill","#FFFFFF")
				.attr("opacity",0.8)
				.attr("transform","translate(" + marker_width/2 + ",0)");
				
			// Lastly, define theme categories/token sets and bind category events -- 
			// this object stores token IDs relevant for each category defined
			categories = {"filtered": false, "filter_category": null,"immigration":["485","490","507","513","550","642","1111","1305","2669","2727","2733","2759","2812","2835","2860","2921","3087","3092","3120","3137","3144","3156","3189","3207","3294","3304","3322","3346"],"death":["157","199","205","213","230","232","375","409","449","463","579","594","636","829","992","1022","1057","1074","1093","1108","1122","1154","1155","1178","1181","1183","1589","1661","1742","1755","1994","2019","2029","2041","2066","2074","2080","2230","2355","2358","2360","2367","2369","2422","2459","2558","2794","2857","2882","2917","3021","3025","3075","3099","3154","3587","3610","3612","3617","3633","3935","4157"],"terrorism":["163","1002","1044","1081","1082","1157","1309","1996","2331","2348","2349","2375","2376","2425","2426","2430","2496","2559","2563","2564","2609","2653","2678","2704","3291"],"opposition":["83","333","382","618","768","904","951","957","1038","1152","1161","1234","1407","1448","1895","1985","2203","2534","2699","2745","2955","2970","3297","3315","3495","3573","3835","3863","3990","4105","4134","4276","4388","5030"]};
			
			$(".search_category[id!=theme_header]").hover(function() {
				if(categories.filtered == false || (categories.filtered == true && categories.filter_category != $(this).attr("id"))) {
					$(this).toggleClass("search_category_selected");
				}
			}).click(function() {

				sub.svg.selectAll(".temporary_text").remove();
				var searchFor = $(this).attr("id");
				if(categories.filtered == false || (categories.filtered == true && categories.filter_category !== searchFor)) {
					sub.svg.selectAll(".word")
						.classed("selected",false)
						.classed("deselected",true);
						
					sub.svg.selectAll(".cheer_group")
						.classed("selected",false)
						.classed("deselected",true);


					$(".search_category").removeClass("search_category_selected");
					$(this).addClass("search_category_selected");
					
					var first_t;
					categories[searchFor].forEach(function(s,i) {
						var element = sub.svg.select(".token_" + s)
							.classed("selected",true)
							.classed("deselected",false);
						
						element.moveToFront();
						var el_data = element.datum();
						
						if(i == 0) {
							first_t = el_data.time_start;
						}

						// Add text label for each instance
						sub.svg.append("text")
							.attr("class","temporary_text")
							.attr("dominant-baseline","middle")
							.attr("text-anchor",function() {
								switch(el_data.polarity) {
									case "positive":
										return "start";
										break;
									case "negative":
										return "end";
										break;
									case "neutral":
										return "end";
										break;
								}
							
							
							})
							.attr("x", 0)
							.attr("y", 0)
							.attr("transform",function() {
								var dx = sub.xScale(el_data.time_start);
								var dy;
								switch(el_data.polarity) {
									case "positive":
										dy = sub.height/2 - 25;
										break;
									case "negative":
										dy = sub.height/2 + 10;
										break;
									case "neutral":
										dy = sub.height/2 - 15;
										break;
								}
								
								return "translate(" + dx + "," + dy + ")rotate(90)";
							
							})							
							.attr("opacity",1)
							.text(el_data.token_label);

					});

					// Get position of first element to scroll into view
					$("#subvis_container").scrollLeft(sub.xScale(first_t) - sub.width/2);
					
					categories.filtered = true;
					categories.filter_category = searchFor;
					
				} else {
					$(".search_category").removeClass("search_category_selected");
					sub.svg.selectAll(".word")
						.classed("selected",true)
						.classed("deselected",false);
						
					sub.svg.selectAll(".cheer_group")
						.classed("selected",true)
						.classed("deselected",false);
						
					categories.filtered = false;
					
				}				
			});

	}); // end $.getJSON

}); // end $(document).ready()
	
	
	</script>
</head>

<body>
<div id="wrapper">
	<div id="header">
		<div id="title">Do You Hear That?<br>It's Trump's America</div>
	</div>
	<div id="vis_container"><div class="loading">Loading...<br><img src="loading.gif"></div></div>
	<div id="subvis_container"></div>
	<div id="search_container">
		<div class="search_category" id="theme_header"><b>THEMES</b></div>
		<div class="search_category" id="death">Death, disaster, and destruction</div>
		<div class="search_category" id="immigration">Immigration and Refugees</div>
		<div class="search_category" id="terrorism">Terrorism and Islam</div>
		<div class="search_category" id="opposition">Hillary and the Democrats</div>
	</div>
	<div id="text_container">
	<div class="section_header" style="text-align: center; padding: 25px;">I am your voice. Make America Great Again!</div>
	<div class="text_content">On the evening of Thursday, July 21, businessman and entrepreneur Donald Trump formally accepted the Republican party nomination of candidacy for president of the United States at the Republican National Convention. Over the course of the primary season, <a target="_blank" href="https://www.washingtonpost.com/blogs/post-partisan/wp/2016/07/22/in-his-acceptance-speech-trump-displays-his-demagoguery/">some</a> <a target="_blank" href="https://www.washingtonpost.com/opinions/trump-is-the-demagogue-that-our-founding-fathers-feared/2016/03/10/58584278-e6df-11e5-b0fd-073d5930a7b7_story.html">pundits</a> <a target="_blank" href="http://www.huffingtonpost.com/entry/donald-trump-jake-tapper-on-the-media_us_575b4c0ce4b0ced23ca82ce3">have</a> <a target="_blank" href="http://time.com/4174328/donald-trump-thoughts-politician/">accused</a> <a target="_blank" href="http://www.theatlantic.com/entertainment/archive/2015/12/what-we-talk-about-when-we-talk-about-demagogues/419514/">Trump</a> of demagoguery in lieu of real political promise, warning that Trump's apocalyptic vision of a future America is built less on fact than it is on an appeal to fear. But regardless of where one stands on the matter, Trump demonstrates <a target="_blank" href="http://www.drw.utexas.edu/roberts-miller/handouts/demagoguery">typical demagogic behavior</a> in his RNC acceptance speech: use of subjective and polarized vocabulary, a predisposition towards confirmation bias, and an exaggeration of facts that points to a crisis that must be solved right here and right now &mdash; by Donald himself.</div>
	<div class="text_content">
	In order to capture these characteristics, this visualization offers a prosodic analysis of Trump's speech in terms of voice cadence, intensity, and connotation. On the top, a "spectrogram" displays the relative proportion of positive (green), negative (red), and neutral (gray) language used over the course of the speech. Larger spikes of green indicate relatively higher proportions of connotatively positive words at that point in the speech, and likewise, larger spikes of red indicate higher proportions of connotatively negative words. These proportions are aggregated at regular 2-second intervals. On the bottom, this polarity is shown in greater detail at the level of individual words. Here, each circle represents a word, and color indicates positive (green), negative (red), and neutral (gray) connotation. These words are distributed vertically to make it easier to see their relative polarity. The relative size of each circle corresponds to the relative intensity of its associated utterance (larger circles indicate words spoken with <i>greater</i> intensity, <i>i.e.</i>, higher decibel ratings), and the trailing length corresponds to the extent to which the word is drawn out over time (circles with longer trails indicate words that are spoken more slowly).
	</div>
	<div class="text_content">
	In addition, the visualization also shows data on cheering during the speech. Cheers are indicated by horizontal bars in the top visualization and circles in the bottom visualization that are colored gold and blue. Gold sections indicate generic cheering or chanting (<i>e.g.</i>, shouting "U.S.A" or "build a wall"); meanwhile, blue sections indicate collective booing. To see examples of words from common themes in the acceptance speech, click on any of the theme headers above. Scroll the bottom visualization left and right to view more of the speech and hover over individual words to see them in sequence; hover left and right over the top visualization to move the time window there as well.
	</div>
	
	<div class="section_header">Data Analysis</div>
	<div class="text_content">Using a <a target="_blank" href="http://www.vox.com/2016/7/21/12253426/donald-trump-acceptance-speech-transcript-republican-nomination-transcript">transcript provided by <i>Vox</i></a> and a <a target="_blank" href="https://www.youtube.com/watch?v=4CVTuOyZDI0">recording retrieved from YouTube</a>, the full nomination acceptance speech delivered by Donald Trump on July 21 at the Republican National Convention was analyzed for voice cadence, voice intensity, and use of polarized language. First, individual spoken words through the course of the speech were timed using a basic JavaScript-based audio player and applet that injected individual words and their timings into a MySQL database while following along with the audio recording. These data stored not only the timing of onset for these utterances but also time elapsed between them. Then, the time-resolved intensity of the speech recording was computed via MATLAB and <a target="_blank" href="http://www.fon.hum.uva.nl/praat/">Praat</a>, and individual intensity signals were subsequently mapped to the individual word utterances described above. Finally, the language in the speech was analyzed for relative polarity (<i>i.e.</i>, whether each word was "positive," "negative", or "neutral" in its connotation) using data from the <a target="_blank" href="http://sentiwordnet.isti.cnr.it">SentiWordNet v3.0</a> semantic index of word subjectivity and polarity.</div>
	<div class="text_content">In the bottom visualization, the relative size of circles (representing words) is determined by a combination of the given word's intensity signal and the length of time in its elapse. Due to human error, there may be some isolated instances in which words appear slightly out of order from the original transcript. In the top visualization, the relative proportion of positive, negative, and neutral language was calculated at 2-second windows as the sum of individual words, their polarity, their intensity, and the length of time over which they are uttered.</div>
	<div class="section_header">More Information</div>
	<div class="text_content">This visualization and its accompanying analysis is the work of <a target="_blank" href="http://www.stevengbraun.com/">Steven Braun</a>. The visualization was created using <a target="_blank" href="http://d3js.org">D3.js</a>, and its accompanying source code and data are <a target="_blank" href="http://www.github.com/braunsg/trump-rnc-speech">available on GitHub</a>.</div>
	</div>
</div>

</body>
</html>